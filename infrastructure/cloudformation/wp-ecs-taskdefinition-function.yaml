AWSTemplateFormatVersion: 2010-09-09
Description: |
  Custom task definition for ECS to create tasks with EFS Volumes. This is a new feature and not yet supported by
  AWS::ECS::TaskDefinition.

Resources:
  CustomResourceFunction:
    Type: 'AWS::Lambda::Function'
    Properties:
      Code:
        ZipFile: |
          const aws = require('aws-sdk')
          const response = require('cfn-response')
          const ecs = new aws.ECS({apiVersion: '2014-11-13'})
          exports.handler = function(event, context) {
            console.log("REQUEST RECEIVED:\n" + JSON.stringify(event))
            if (event.RequestType === 'Create' || event.RequestType === 'Update') {
              event.ResourceProperties.TaskDefinition.containerDefinitions.forEach(containerDefinition => {
                // Convert containerDefinition.essential to boolean
                if(containerDefinition.essential) {
                  containerDefinition.essential = containerDefinition.essential.toLowerCase() === 'true';
                }
              });
              ecs.registerTaskDefinition(event.ResourceProperties.TaskDefinition, function(err, data) {
                if (err) {
                  console.error(err);
                  response.send(event, context, response.FAILED)
                } else {
                  console.log(`Created/Updated task definition ${data.taskDefinition.taskDefinitionArn}`)
                  response.send(event, context, response.SUCCESS, {}, data.taskDefinition.taskDefinitionArn)
                }
              })
            } else if (event.RequestType === 'Delete') {
              ecs.deregisterTaskDefinition({taskDefinition: event.PhysicalResourceId}, function(err) {
                if (err) {
                  if (err.code === 'InvalidParameterException') {
                    console.log(`ECS Task definition: $event.PhysicalResourceId{} does not exists. Skipping deletion.`)
                    response.send(event, context, response.SUCCESS)
                  }
                  else {
                    console.error(err);
                    response.send(event, context, response.FAILED)
                  }
                } else {
                  console.log(`Removed task definition ${event.PhysicalResourceId}`)
                  response.send(event, context, response.SUCCESS)
                }
              })
            } else {
              console.error(`Unsupported request type: ${event.RequestType}`)
              response.send(event, context, response.FAILED)
            }
          }
      Handler: 'index.handler'
      MemorySize: 128
      Role: !GetAtt 'CustomResourceRole.Arn'
      Runtime: 'nodejs10.x'
      Timeout: 30

  CustomResourceRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: 'lambda.amazonaws.com'
            Action: 'sts:AssumeRole'
      Policies:
        - PolicyName: 'CfnCustomResource'
          PolicyDocument:
            Statement:
              - Effect: Allow
                Action:
                  - 'ecs:DeregisterTaskDefinition'
                  - 'ecs:RegisterTaskDefinition'
                Resource: '*'
              - Effect: Allow
                Action:
                  - 'logs:CreateLogGroup'
                  - 'logs:CreateLogStream'
                  - 'logs:PutLogEvents'
                Resource: '*'
              - Effect: Allow
                Action:
                  - 'iam:PassRole'
                Resource: '*'

Outputs:
  CustomResourceFunctionArn:
    Description: Lambda function for creating task definition.
    Value: !GetAtt CustomResourceFunction.Arn
