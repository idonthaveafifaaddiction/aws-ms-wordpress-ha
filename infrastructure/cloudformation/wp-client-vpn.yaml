AWSTemplateFormatVersion: 2010-09-09
Description: AWS Client VPN Endpoint Resources
Parameters:
  ClientCidrBlock:
    Type: String
    Description: "CIDR Block for client connections, this range of IP will be assigned to VPN client connections"
    Default: "10.0.144.0/20"
    AllowedPattern: '((\d{1,3})\.){3}\d{1,3}/\d{1,2}'

  VpcId:
    Type: 'AWS::EC2::VPC::Id'
    Description: "VPC Id"

  SubnetId1:
    Type: 'AWS::EC2::Subnet::Id'
    Description: "Public subnet1 for client VPN"

  ServerCertificateArn:
    Type: String
    Description: "Client VPN Server Certificate ARN"
    MinLength: 1
    AllowedPattern: "arn[:].*"

  TargetNetworkCidrforAuthorization:
    Type: String
    Default: 0.0.0.0/0
    Description: "All CIDR network"
    AllowedPattern: '((\d{1,3})\.){3}\d{1,3}/\d{1,2}'

  ClientVpnLogsRetentionPeriod:
    Type: Number
    Default: 7
    Description: "Retention (in days) for client vpn logs"
    MinValue: 1

  EnableClientVpn:
    Type: String
    Description: Enable Client Vpn
    Default: "true"
    AllowedValues: ["true", "false"]

Conditions:
  EnableClientVpn: !Equals [ !Ref EnableClientVpn, "true" ]

Resources:
  ClientVPNLogGroup:
    Type: 'AWS::Logs::LogGroup'
    Properties:
      RetentionInDays: !Ref ClientVpnLogsRetentionPeriod
      LogGroupName: !Sub '${AWS::StackName}-ClientVpnEndpoint-logs'

  VPNSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      VpcId: !Ref VpcId
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}
      GroupDescription: Access to VPN Client Endpoint
      SecurityGroupIngress:
        - Description: Allow All Traffic from VPN
          CidrIp: '10.0.0.0/16'
          IpProtocol: '-1'

  ClientVPNEndpoint:
    Type: 'AWS::EC2::ClientVpnEndpoint'
    Properties:
      AuthenticationOptions:
        - Type: certificate-authentication
          MutualAuthentication:
            ClientRootCertificateChainArn: !Ref ServerCertificateArn
      ClientCidrBlock: !Ref ClientCidrBlock
      Description: Client VPN Endpoint
      SecurityGroupIds:
        - !Ref VPNSecurityGroup
      ServerCertificateArn: !Ref ServerCertificateArn
      TransportProtocol: udp
      VpcId: !Ref VpcId
      VpnPort: 443
      ConnectionLogOptions:
        CloudwatchLogGroup: !Ref ClientVPNLogGroup
        Enabled: true
      SplitTunnel: true

  NetworkAssociation:
    Type: 'AWS::EC2::ClientVpnTargetNetworkAssociation'
    Properties:
      ClientVpnEndpointId: !Sub '${ClientVPNEndpoint}'
      SubnetId: !Ref SubnetId1
    Condition: EnableClientVpn

  AuthRule:
    Type: 'AWS::EC2::ClientVpnAuthorizationRule'
    Properties:
      ClientVpnEndpointId: !Sub '${ClientVPNEndpoint}'
      AuthorizeAllGroups: true
      TargetNetworkCidr:
        Ref: TargetNetworkCidrforAuthorization
      Description: "AuthRule"

  VpnRoute:
    Type: "AWS::EC2::ClientVpnRoute"
    Properties:
      ClientVpnEndpointId: !Sub '${ClientVPNEndpoint}'
      TargetVpcSubnetId: !Ref SubnetId1
      DestinationCidrBlock:
        Ref: TargetNetworkCidrforAuthorization
      Description: "VPN Route"
    Condition: EnableClientVpn
    DependsOn: NetworkAssociation

Outputs:
  VPNEndPointname:
    Description: "Client VPN Endpoint name"
    Value: !Ref ClientVPNEndpoint
  LogGroupName:
    Description: "LogGroup Name"
    Value: !Ref ClientVPNLogGroup
  VPNSecurityGroup:
    Description: "Security group id for Client VPN"
    Value: !GetAtt VPNSecurityGroup.GroupId
