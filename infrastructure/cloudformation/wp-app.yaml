AWSTemplateFormatVersion: 2010-09-09
Description: 'Wordpress Application Stack'

Parameters:
  AppSubnet1Id:
    Type: "AWS::EC2::Subnet::Id"
    Description: "Application Subnet 1"

  AppSubnet2Id:
    Type: "AWS::EC2::Subnet::Id"
    Description: "Application Subnet 2"

  AppSubnet3Id:
    Type: "AWS::EC2::Subnet::Id"
    Description: "Application Subnet 3"

  AppSecurityGroup:
    Type: "AWS::EC2::SecurityGroup::Id"
    Description: "Application Security Group Id"

  ParentStackName:
    Type: 'String'
    Description: 'Name of parent stack.'
    MinLength: 1

  AppLogRetentionDays:
    Type: 'Number'
    Description: 'Application log retention in days'
    MinValue: 1
    Default: 30

  TargetGroupArn:
    Type: 'String'
    Description: 'Load balancer target group for associating ECS Service'
    MinLength: 1

  PrivateTargetGroupArn:
    Type: 'String'
    Description: 'Private Load balancer target group for associating ECS Service'
    MinLength: 1

  SsmParameterKmsKeyAlias:
    Type: 'String'
    Description: 'Load balancer target group for associating ECS Service'
    Default: 'alias/aws/ssm'
    MinLength: 1

  SecretManagerKmsKeyAlias:
    Type: 'String'
    Description: 'Load balancer target group for associating ECS Service'
    Default: 'alias/aws/secretsmanager'
    MinLength: 1

  SsmNginxPrivateKey:
    Type: 'String'
    Description: |
      SSM Parameter store parameter holding Nginx SSL Private key (eg: /wordpress/ssl/server.key)
      The Nginx private key needs to be pre-generated and stored as a  SSM SecureString.
    MinLength: 1
    AllowedPattern: '^[/].*'

  SsmNginxCert:
    Type: 'String'
    Description: |
      SSM Parameter store parameter holding Nginx SSL public cert or bundled cert (eg: /wordpress/ssl/server.crt)
      Nginx public cert needs to be pre-generated and stored as a  SSM SecureString.
    MinLength: 1
    AllowedPattern: '^[/].*'

  CustomTaskDefinitionLambdaArn:
    Type: 'String'
    Description: |
      Custom lambda function ARN for creating ECS task definition that supports EFS Volumes
    MinLength: 1

  EfsFileSystemId:
    Type: 'String'
    Description: EFS File System Id
    MinLength: 1

  DbRootSecretArn:
    Type: String
    Description: Database secret manager secret for root user
    MinLength: '1'
    AllowedPattern: '^arn[:].*'

Resources:
  LogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Join ['/', [/ecs, !Ref ParentStackName, app]]
      RetentionInDays: !Ref AppLogRetentionDays

  NginxConfig:
    # Since nginx configuration does not contain any secret values, we will directly load iit as SSM Parameter
    # This will be injected into container as secret environment
    Type: AWS::SSM::Parameter
    Properties:
      Description: Wordpress Nginx Configuration
      Tier: 'Intelligent-Tiering'
      Type: String
      Value: |
        server {
            listen 443 ssl http2;
            server_name _;

            ssl_certificate /etc/nginx/ssl/server.crt;
            ssl_certificate_key /etc/nginx/ssl/server.key;

            # Strict Security
            add_header Strict-Transport-Security "max-age=31536000; includeSubDomains; preload" always;
            add_header X-Frame-Options SAMEORIGIN always;
            add_header X-Content-Type-Options nosniff always;
            add_header Referrer-Policy same-origin always;
            add_header Feature-Policy "vibrate 'self'; usermedia *; sync-xhr 'self'" always;
            add_header X-XSS-Protection "1; mode=block" always;
            server_tokens off;

            # Log files for Debug
            error_log  /var/log/nginx/error.log;
            access_log /var/log/nginx/access.log;

            #Large File Uploads
            client_max_body_size 100M;

            root /var/www/html/;
            # root /usr/share/nginx/html;
            index index.php index.html;

            location / {
                proxy_set_header   Connection "";
                proxy_http_version 1.1;
                proxy_set_header        Host            $host;
                proxy_set_header        X-Real-IP       $remote_addr;
                proxy_set_header        X-Forwarded-For $proxy_add_x_forwarded_for;
                proxy_set_header      X-Forwarded-Proto https;
                proxy_set_header      X-Forwarded-Host $host:443;
                try_files $uri $uri/ /index.php?$query_string;
                gzip_static on;
            }

            location ~* .(ogg|ogv|svg|svgz|eot|otf|woff|mp4|ttf|css|rss|atom|js|jpg|jpeg|gif|png|ico|zip|tgz|gz|rar|bz2|doc|xls|exe|ppt|tar|mid|midi|wav|bmp|rtf)$ {
                expires max;
                log_not_found off;
                access_log off;
            }

            # Nginx Pass requests to PHP-FPM
            location ~ \.php$ {
                try_files $uri =404;
                fastcgi_split_path_info ^(.+\.php)(/.+)$;
                fastcgi_pass localhost:9000;
                fastcgi_index index.php;
                include fastcgi_params;
                fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;
                fastcgi_param PATH_INFO $fastcgi_path_info;
            }
        }

  TaskExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
            Action: 'sts:AssumeRole'
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy'
      Policies:
        - PolicyName: SSMAccess
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - ssm:GetParameters
                Resource:
                  - !Sub arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/${NginxConfig}
                  - !Sub arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter${SsmNginxPrivateKey}
                  - !Sub arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter${SsmNginxCert}
              - Effect: Allow
                Action:
                  - kms:Decrypt
                Resource:
                  - !Sub arn:aws:kms:${AWS::Region}:${AWS::AccountId}:${SsmParameterKmsKeyAlias}
                  - !Sub arn:aws:kms:${AWS::Region}:${AWS::AccountId}:${SecretManagerKmsKeyAlias}
              - Effect: Allow
                Action:
                  - secretsmanager:GetSecretValue
                Resource:
                  - !Ref DbRootSecretArn

  WpCustomTaskDefinition:
    Type: 'Custom::TaskDefinition'
    Version: '1.0'
    Properties:
      ServiceToken: !Ref CustomTaskDefinitionLambdaArn
      TaskDefinition:
        family: !Ref ParentStackName
        volumes:
          - name: "efs"
            efsVolumeConfiguration:
              fileSystemId: !Ref EfsFileSystemId

        containerDefinitions:
          - image: "wordpress:5.4.1-php7.4-fpm-alpine"
            name: "wordpress"
            memory: 128
            logConfiguration:
              logDriver: awslogs
              options:
                awslogs-region: !Ref AWS::Region
                awslogs-group: !Ref LogGroup
                awslogs-stream-prefix: wordpress-app
            mountPoints:
              - sourceVolume: "efs"
                containerPath: "/var/www/html"
            secrets:
              - name: WORDPRESS_DB_USERNAME
                valueFrom: !Sub "${DbRootSecretArn}:username::"
              - name: WORDPRESS_DB_NAME
                valueFrom: !Sub "${DbRootSecretArn}:dbname::"
              - name: WORDPRESS_DB_HOST
                valueFrom: !Sub "${DbRootSecretArn}:host::"
              - name: WORDPRESS_DB_PASSWORD
                valueFrom: !Sub "${DbRootSecretArn}:password::"
          - image: "nginx:1.18.0-alpine"
            name: "nginx-proxy"
            memory: 128
            portMappings:
              - containerPort: 443
                hostPort: 443
            logConfiguration:
              logDriver: awslogs
              options:
                awslogs-region: !Ref AWS::Region
                awslogs-group: !Ref LogGroup
                awslogs-stream-prefix: wordpress-nginx
            secrets:
              - name: NGINX_CONFIG
                valueFrom: !Sub arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/${NginxConfig}
              - name: NGINX_SSL_PRIVATE_KEY
                valueFrom: !Sub arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter${SsmNginxPrivateKey}
              - name: NGINX_SSL_CERT
                valueFrom: !Sub arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter${SsmNginxCert}
            command:
              - "sh"
              - "-c"
              - |
                set -ueo pipefail;
                # TODO: Pull in certs from ACM
                NGINX_CONFD_DIR=/etc/nginx/conf.d
                NGINX_SSL_DIR=/etc/nginx/ssl
                echo "Storing NGINX_CONFIG to $NGINX_CONFD_DIR/wordpress.conf"
                mkdir -p "$NGINX_CONFD_DIR"
                echo -n "$NGINX_CONFIG" > "$NGINX_CONFD_DIR/wordpress.conf"

                echo "Adding certificates and private key"
                mkdir -p "$NGINX_SSL_DIR"
                echo -n "$NGINX_SSL_CERT" > "$NGINX_SSL_DIR/server.crt"
                echo -n "$NGINX_SSL_PRIVATE_KEY" > "$NGINX_SSL_DIR/server.key"

                echo "Starting nginx..."
                nginx -g 'daemon off;'
            mountPoints:
              - sourceVolume: "efs"
                containerPath: "/var/www/html"
        networkMode: 'awsvpc'
        memory: '512'
        cpu: '256'
        requiresCompatibilities: [FARGATE]
        executionRoleArn: !GetAtt TaskExecutionRole.Arn

  ECSCluster:
    Type: AWS::ECS::Cluster

  WpService:
    Type: AWS::ECS::Service
    Properties:
      Cluster: !Ref ECSCluster
      LaunchType: 'FARGATE'
      PlatformVersion: '1.4.0'
      PropagateTags: 'SERVICE'
      SchedulingStrategy: 'REPLICA'
      DeploymentConfiguration:
        MinimumHealthyPercent: 100
      DesiredCount: 1
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: 'DISABLED'
          SecurityGroups:
            - !Ref AppSecurityGroup
          Subnets:
            - !Ref AppSubnet1Id
            - !Ref AppSubnet2Id
            - !Ref AppSubnet3Id
      TaskDefinition: !Ref WpCustomTaskDefinition
      LoadBalancers:
        - ContainerName: nginx-proxy
          ContainerPort: 443
          TargetGroupArn: !Ref TargetGroupArn
        - ContainerName: nginx-proxy
          ContainerPort: 443
          TargetGroupArn: !Ref PrivateTargetGroupArn

Outputs:
  CustomTaskDefinitionLambdaArn:
    Description: Lambda function for creating task definition.
    Value: !Ref CustomTaskDefinitionLambdaArn
